from typing import Protocol, Iterable, Dict, Any
from .types import Quote, Trade, OrderReq, Fill, AccountSnapshot

class IMarketData(Protocol):
    def subscribe_quotes(self, symbol: str) -> Iterable[Quote]: ...
    def subscribe_trades(self, symbol: str) -> Iterable[Trade]: ...
    def get_mark_price(self, symbol: str) -> float: ...
    def get_funding(self, symbol: str) -> float: ...

class IExecutionBackend(Protocol):
    def place(self, req: OrderReq) -> str: ...
    def cancel(self, client_order_id: str) -> bool: ...
    def on_quote(self, q: Quote) -> Iterable[Fill]: ...
    def on_trade(self, t: Trade) -> Iterable[Fill]: ...
    def snapshot(self) -> AccountSnapshot: ...

class IStorage(Protocol):
    def write_event(self, kind: str, payload: Dict[str, Any]) -> None: ...
    def write_fill(self, f: Fill) -> None: ...
    def write_snapshot(self, s: AccountSnapshot) -> None: ...

class IRisk(Protocol):
    def pre_place(self, req: OrderReq) -> bool: ...
    def on_fill(self, fill: Fill) -> None: ...
